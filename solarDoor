if not os.loadAPI("m13") then
    print("Error loading m13 API")
    return
end
if not os.loadAPI("redmsg") then
    print("Error loading redmsg API")
    return
end
if not os.loadAPI("ocs/apis/sensor") then
    print("Error loading sensor API")
    return
end

local xSize, ySize = term.getSize()

local accessAllowed = {
    "magico13",
    "njh621"
}

local facilityName = "Solstone Energy: Sol Sands Facility"
local doorSide = "left"
local powerSide = "top"
local sensorSide = "back"
local monitorSide = "right"
local overflowSide = "bottom"
local overflowThreshold = 95

local doorOpen = redstone.getOutput(doorSide)
local powerActivated = redstone.getOutput(powerSide)

local icSensor = sensor.wrap(sensorSide)
local bbox = nil
local monitor = peripheral.wrap(monitorSide)
monitor.setTextScale(1)

local lastTime = os.clock()
local lastStored = -1

function successfulEntry(user)
    userLoop(user)
end

function toggleDoor()
    doorOpen = not doorOpen
    redstone.setOutput(doorSide, doorOpen)
    m13.popup(doorStateText(doorOpen))
    sleep(1)
end

function togglePower()
    powerActivated = not powerActivated
    redstone.setOutput(powerSide, powerActivated)
    m13.popup(powerStateText(powerActivated))
    sleep(1)
end

function doorStateText(state)
    local txt = "Door "
    if state then txt = txt.."Opened"
    else txt = txt.."Closed"
    end
    return txt
end

function powerStateText(state)
    local txt = "Power "
    if state then txt = txt.."Activated"
    else txt = txt.."Deactivated"
    end
    return txt
end

function userLoop(user)
    local loggedIn = true
    local fnSelected = 1
    local funcs = {
        "Toggle Door",
        "Toggle Power",
        "Logout"
    }
    local listStart = 8
    while loggedIn do
        pwr = getPowerDetails(icSensor, bbox)
        updateMonitor(monitor, pwr)
        handleOverflow(pwr.Percentage)
        m13.reset()
        m13.printCenter(facilityName, 2)
        m13.printCenter("Logged in as: "..user, ySize-1)
        m13.printCenter(doorStateText(doorOpen), 5)
        m13.printCenter(powerStateText(powerActivated), 6)
        m13.printCenter("Stored: "..pwr.Stored.."EU".." ("..pwr.Percentage.."%)", 7)
        for i, f in pairs(funcs) do
            local entry = f
            if i == fnSelected then entry = ">"..entry.."<" end
            m13.printCenter(entry, listStart+i)
        end
        m13.makeBorder()

        local resp = listenForKeys(1)
        if resp then -- not timed out
            if resp ~= 0 then -- up/down keys
                fnSelected = fnSelected - 1 + resp
                fnSelected = fnSelected % table.getn(funcs)
                fnSelected = fnSelected + 1
            else -- they pressed enter
                if fnSelected == 1 then toggleDoor()
                elseif fnSelected == 2 then togglePower()
                elseif fnSelected == 3 then loggedIn = false
                end
            end
        end
    end
    m13.reset()
    m13.popup("Goodbye "..user)
end


function listenForKeys(timeout)
    timer = os.startTimer(timeout)
    while true do
        local event, a1, a2, a3 = os.pullEvent()
        if event == "key" then
            if a1 == keys.up then return -1
            elseif a1 == keys.down then return 1
            elseif a1 == keys.enter then return 0
            end
        elseif event == "timer" then
            if a1 == timer then return nil end
        end    
    end
end

function listenForChars(timeout)
    timer = os.startTimer(timeout)
    while true do
        local event, a1, a2, a3 = os.pullEvent()
        if event == "char" then
            return a1
        elseif event == "key" then
            if a1 == keys.backspace or a1 == keys.enter then return a1 end
        elseif event == "timer" then
            if a1 == timer then return nil end
        end    
    end
end

function findIC2BlockByName(sens, name)
    for k, v in pairs(sens.getTargets()) do
        if v.RawName == name then return k end
    end
    return nil
end

function getPowerDetails(sens, key)
    details = sens.getTargetDetails(key)
    newDetails = {}
    newDetails.Stored = details.Stored
    newDetails.Capacity = details.Capacity
    newDetails.Percentage = details.StoredPercentage
    return newDetails
end

function round(x)
    return x>=0 and math.floor(x+0.5) or math.ceil(x-0.5)
end

function handleOverflow(storedPower)
    if storedPower > overflowThreshold then
        redstone.setOutput(overflowSide, false) -- false enables the device
    else
        redstone.setOutput(overflowSide, true) -- true disables the device
    end
end

function updateMonitor(mon, details)
    local time = os.clock()
    local EUt = 0

    term.redirect(mon)
    m13.printCenter("Stored:", 1)
    
    m13.cPos(1, 2)
    term.clearLine()
    m13.printCenter(details.Stored, 2)
    
    m13.cPos(1, 3)
    term.clearLine()
    m13.printCenter(details.Percentage.."%", 3)
    
    m13.printCenter("EU/t:", 4)

    m13.cPos(1,5)
    term.clearLine()
    if lastStored >= 0 then
        EUt = (details.Stored - lastStored) / (time - lastTime)
        EUt = round(EUt / 20)
    end
    m13.printCenter(EUt, 5)
    term.restore()
    lastStored = details.Stored
    lastTime = time
end

txt = ""
bbox = findIC2BlockByName(icSensor, "ic2.blockbatbox")
if not bbox then print("BatBox not found") return end
while true do
    term.setCursorBlink(true)
    local details = getPowerDetails(icSensor, bbox)
    updateMonitor(monitor, details)
    handleOverflow(details.Percentage)
    m13.reset()
    
    m13.printCenter(facilityName, 2)
    m13.printCenter("Access is restricted to", 4)
    m13.printCenter("Authorized Personel Only", 5)
    m13.printCenter("Please Enter your ID: ", 7)
    m13.makeBorder()

    m13.writeAt(txt, 15, 8)
    c = listenForChars(1)
    if c == keys.enter then
        term.setCursorBlink(false)
        if m13.elementInTable(accessAllowed, txt) then
            m13.popup("Welcome "..txt.."!")
            sleep(1)
            successfulEntry(txt)
            sleep(1)
        else
            m13.popup("Access Denied")
            sleep(1)
        end
        txt = ""
    elseif c == keys.backspace then
        txt = txt:sub(1, -2)
    elseif c ~= nil then 
        txt = txt..c
    end
end